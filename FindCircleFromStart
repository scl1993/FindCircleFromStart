def findCircle(firstNode, graph):
    """
    宽度优先搜索。查找无向图中，经过某一点的环
    :param firstNode: 开始点
    :param graph: 无向图
    :return: 返回环路路径集合
    """
    peerNodes = graph[firstNode]
    ring_paths = []
    result_paths = []
    for nextNode in peerNodes:
        path = []
        path.append(firstNode)
        path.append(nextNode)
        ## 队列：记录当前待查找的路径
        ring_paths.append(path)
    while True:
        length = len(ring_paths)
        if length == 0:
            break
        num = 0
        while num < length:
            path = ring_paths[0]
            endNode = path[len(path) - 1]
            ## 判断是否从start点经过环到达该点
            if endNode == firstNode:
               tem_Path = path[:]
               is_same_path = False
               ## 在已有的环路中查看是否相同：例如：abca  acba，不相同的时候才添加到结果集合中
               for result_Path in result_paths:
                  if tem_Path == result_Path[::-1]:
                     is_same_path = True
               if is_same_path == False:
                   result_paths.append(tem_Path)
            ## 出队，把队头的路径出队，
            ring_paths.pop(0)
            ## 找到该当前节点，的相邻节点。作为该路径要遍历的下一个节点
            if path[len(path) - 1] in graph.keys():
                nowNode = path[len(path) - 1]
                nodes = graph[path[len(path) - 1]]
                ## 遍历相邻、联通节点，
                for node in nodes:
                    ## 该节点是否是新节点：不能走重复（回退到上一个节点）、并且当前路径的最后一个节点不是目的节点。否则要结束
                    if node != path[len(path) - 2] and nowNode != firstNode:
                        new_path = path[:]
                        ## 判断该节点是否是路径中已经存在的节点。避免出现死循环，重复走之前的路径：例如：abcdbcdbcd.....
                        ## 但是当新节点是目的节点的时候，也把新节点添加进来。
                        if (node not in new_path) or (node == firstNode):
                            new_path.append(node)
                            ring_paths.append(new_path)
                    num = num + 1
            else:
                    num = num + 1
                    continue

    for p in result_paths:
        print(p)
    return


if __name__ == '__main__':
    graph = {
        0: [8, 9, 2, 7, 1],
        1: [4, 5, 6, 0],
        6: [7, 1],
        3: [9, 4],
        8: [0],
        9: [0, 3],
        2: [0],
        7: [0, 6],
        4: [1, 3],
        5: [1],
    }
    startNode = 0
    findCircle(startNode, graph)
